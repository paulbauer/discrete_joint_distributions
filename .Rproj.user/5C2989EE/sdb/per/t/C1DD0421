{
    "contents" : "\n\n# Counter\n# A server parameters\nSP <- list()\n# Record the number of poeple who have used the app\n#    since initiation on the server\nSP$npers <- 0\n\n\n\n\n\nshinyServer(function(input, output) {\n  # Counter\n  # shinyServer is Started up every time the domain is called.\n  # Use <<- to assign to the global server environment.\n  SP$npers <<- SP$npers + 1\n  output$hits <- renderText({\n    paste0(\"Pageviews: \" , SP$npers)\n  })\n  \n  default.data <-\n    read.csv(\n      \"http://paulcbauer.eu/wp-content/uploads/2015/11/ess_ch.csv\", header = TRUE, sep =\n        \",\"\n      )\n\n  # MAKE UI REACTIVE\n  output$selectUI <- renderUI({\n    # Import data\n    inFile <- input$file1\n    if (is.null(inFile)) {\n      x <- default.data\n      selectInput(\n        \"variablename\", \"Select variable:\", choices = names(x) , selected = 2\n      )\n    } else {\n      x <- read.csv(\n        inFile$datapath, header = input$header, sep = input$sep,\n        quote = input$quote\n      )\n      selectInput(\n        \"variablename\", \"Select variable:\", choices = names(x) , selected = 2\n      )\n    }\n  })\n  \n  \n  \n  output$table <- renderDataTable({\n    inFile <- input$file1\n    if (is.null(inFile)) {\n      default.data\n    } else {\n      read.csv(\n        inFile$datapath, header = input$header, sep = input$sep,\n        quote = input$quote\n      )\n    }\n  })\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  output$plot <- renderPlot({\n    # Either use default file or uploaded file\n    inFile <- input$file1\n    if (is.null(inFile)) {\n      x <- default.data\n    } else {\n      x <- read.csv(\n        inFile$datapath, header = input$header, sep = input$sep,\n        quote = input$quote\n      )\n    }\n    x <- x[, input$variablename]\n    \n    \n    \n    if (input$type == \"Frequency distribution\") {\n      type <- TRUE\n      table.x <- table(x)\n      par(mar = c(5,5,2,1))\n      breaks <-\n        c(as.numeric(names(table.x)) - 0.5, max(x, na.rm = T) + 0.5)\n      hist(\n        x, xlab = input$variablename, main = paste(paste(input$type), \" of \", input$variablename, sep =\n                                                     \"\"), freq = type, breaks = breaks, xaxt = \"n\", range(breaks), cex.axis =\n          2, cex.lab = 2, cex.main = 2\n      )\n      if (input$variablename != \"party.voted.last\") {\n        axis(\n          1, at = as.numeric(names(table.x)), labels = names(table.x), cex.axis =\n            2\n        )\n      }\n      if (input$variablename == \"party.voted.last\") {\n        axis(\n          1, at = as.numeric(names(table.x)), labels = c(\n            \"SVP\", \"SPS\", \"FDP\", \"CVP\", \"Gr端ne\", \"Gr端nliberale\", \"BDP\", \"Other\"\n          ), cex.axis = 2\n        )\n      }\n      if (input$type == \"Frequency distribution\") {\n        abline(h = seq(0,1500,100), col = \"grey\", lty = 2)\n      }\n      if (input$type == \"Relative frequency distribution\") {\n        abline(h = seq(0,1,0.05), col = \"grey\", lty = 2)\n      }\n    }\n    \n    \n    if (input$type == \"Relative frequency distribution\") {\n      type <- FALSE\n      table.x <- table(x)\n      par(mar = c(5,5,2,1))\n      breaks <-\n        c(as.numeric(names(table.x)) - 0.5, max(x, na.rm = T) + 0.5)\n      hist(\n        x, xlab = input$variablename, main = paste(paste(input$type), \" of \", input$variablename, sep =\n                                                     \"\"), freq = type, breaks = breaks, xaxt = \"n\", range(breaks), cex.axis =\n          2, cex.lab = 2, cex.main = 2\n      )\n      \n      if (input$variablename != \"party.voted.last\") {\n        axis(\n          1, at = as.numeric(names(table.x)), labels = names(table.x), cex.axis =\n            2\n        )\n      }\n      if (input$variablename == \"party.voted.last\") {\n        axis(\n          1, at = as.numeric(names(table.x)), labels = c(\n            \"SVP\", \"SPS\", \"FDP\", \"CVP\", \"Gr端ne\", \"Gr端nliberale\", \"BDP\", \"Other\"\n          ), cex.axis = 2\n        )\n      }\n      if (input$type == \"Frequency distribution\") {\n        abline(h = seq(0,1500,100), col = \"grey\", lty = 2)\n      }\n      if (input$type == \"Relative frequency distribution\") {\n        abline(h = seq(0,1,0.05), col = \"grey\", lty = 2)\n      }\n    }\n    \n  }, height = 400)\n  \n  \n  \n  \n  \n  \n  \n  output$plot2 <- renderPlot({\n    # Either use default file or uploaded file\n    inFile <- input$file1\n    if (is.null(inFile)) {\n      x <- default.data\n    } else {\n      x <- read.csv(\n        inFile$datapath, header = input$header, sep = input$sep,\n        quote = input$quote\n      )\n    }\n    x <- x[, input$variablename]\n    \n    \n    if (input$type == \"Relative frequency distribution\") {\n      # x <- ess.ch[, input$variablename]\n      forgraph <- as.matrix(prop.table(table(x)))\n      dimnames(forgraph)[[2]] <- c(\"\\n\")\n    }\n    \n    if (input$type == \"Frequency distribution\") {\n      # x <- ess.ch[, input$variablename]\n      forgraph <- as.matrix(table(x))\n      dimnames(forgraph)[[2]] <- c(\"\\n\")\n    }\n    \n    \n    \n    z.scale <- input$z.scale\n    x.scale <- input$x.scale\n    variablename <- input$variablename\n    \n    cloud(\n      forgraph, panel.3d.cloud = panel.3dbars,\n      xbase = 0.4, ybase = 0.4, zlim = c(0, max(forgraph)),\n      scales = list(arrows = FALSE, just = \"right\"), zlab = NULL,\n      xlab = variablename,\n      ylab =  \"\\n\",\n      col.facet = level.colors(\n        forgraph, at = do.breaks(range(forgraph), 20),\n        col.regions = gray.colors,\n        colors = TRUE\n      ),\n      colorkey = list(col = gray.colors, at = do.breaks(range(forgraph), 20))\n      ,screen = list(z = z.scale, x = x.scale)\n    )\n    \n    \n  }, height = 400)\n  \n  \n\n})\n",
    "created" : 1446907104729.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "292083296",
    "id" : "C1DD0421",
    "lastKnownWriteTime" : 1446859421,
    "path" : "C:/Users/paul/Google Drive/Packages/guessing_distributions/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}